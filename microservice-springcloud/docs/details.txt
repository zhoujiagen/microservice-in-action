
===============================================================================
2. Spring Cloud Context: Application Context Services

=== 2.1 The Bootstrap Application Context

A Spring Cloud application operates by creating a "bootstrap" context,
which is a parent context for the main application.

Bootstrap properties are added with high precedence,
so they cannot be overridden by local configuration, by default.

bootstrap.yml

=== 2.2 Application Context Hierarchies

If you build an application context from SpringApplication or SpringApplicationBuilder,
then the Bootstrap context is added as a parent to that context.

===============================================================================
Part III. Spring Cloud Netflix
===============================================================================

=== microservice-springcloud-netflixregistry

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
		</dependency>

spring.application.name=netflix.eureka.registry
server.port=8761
# as a standalone Eureka Server
eureka.instance.hostname=localhost
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

@EnableEurekaServer
@SpringBootApplication
public class EurekaRegistryApplicaiton {
  public static void main(String[] args) {
    SpringApplication.run(EurekaRegistryApplicaiton.class, args);
  }
}

Spring Eureka info page: http://localhost:8761/

=== microservice-springcloud-netflixserver

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

spring.application.name=netflix.eureka.provider
server.port=8762
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

@SpringBootApplication
public class EurekaServerApplicaiton {
  public static void main(String[] args) {
    SpringApplication.run(EurekaServerApplicaiton.class, args);
  }
}

@RestController
public class DummyServiceController {
  // mock a service
  @RequestMapping("/hello")
  public @ResponseBody Object hello() {
    return "hello, there. I'm " + DummyServiceController.class.getSimpleName();
  }
}

=== microservice-springcloud-netflixclient

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

spring.application.name=netflix.eureka.consumer
server.port=8763
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

@SpringBootApplication
public class EurekaClientApplicaiton {

  @Bean
  @LoadBalanced
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }

  public static void main(String[] args) {
    SpringApplication.run(EurekaClientApplicaiton.class, args);
  }
}

@RestController
public class DummyClientController {
  private static final Logger LOG = LoggerFactory.getLogger(DummyClientController.class);

  @Autowired
  private EurekaClient eurekaClient;

  @Autowired
  private RestTemplate restTemplate;

  @RequestMapping("/hello")
  public Object hello() {
    LOG.info("ACCEPT /hello...");
    Application application = eurekaClient.getApplication("NETFLIX.EUREKA.PROVIDER");
    List<InstanceInfo> instanceInfos = application.getInstances();
    if (instanceInfos != null && instanceInfos.size() > 0) {
      InstanceInfo instanceInfo = instanceInfos.get(0);
      LOG.info("INSTANCE={}", instanceInfo);
      return instanceInfo;
    }
    return "";
  }

  @RequestMapping("/hellorest")
  public String hellorest() {
    return restTemplate.getForEntity("http://NETFLIX.EUREKA.PROVIDER/hello", String.class)
        .getBody();
  }
}



